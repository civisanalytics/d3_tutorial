</script>

<style>
  @import url('https://fonts.googleapis.com/css?family=Baloo+Thambi');

  input {
     margin-left: 5px;
     margin-right: 5px;
   }

   .form-group {
     display: inline-block;
     margin-left: 10px;
     margin-right: 10px;
   }
   .form-control {
     display: inline-block;
     margin-left: 10px;
     margin-right: 10px;
     width: 375;
   }

   * {
     margin:0;
     padding:0;
     font-family: Baloo Thambi;
   }

   h1 {
     font-size:16px sans-serif;
     line-height:0.2em;
     font-weight: bold;
     font-family: Baloo Thambi;
   }

   h2 {
     font: 15px sans-serif;
     line-height:0.2em;
     font-weight: bold;
     font-family: Baloo Thambi;
   }
   
   p {
     fill: #8FA2AC;
     font-family: Baloo Thambi;
     font-size: 12px;
   }

   .axis text {
     fill: #8FA2AC;
     font: 12px sans-serif;
     font-family: Baloo Thambi;
   }

   .axis path,
   .axis line {
     fill: none;
     stroke: none;
     shape-rendering: crispEdges;
   }

   .chart {
     font-family: Baloo Thambi;
   }

   .date_marker {
     stroke-width: 1px;
   }

   .date_label_top {
     fill: #8FA2AC;
     text-anchor: middle;
     font-family: Baloo Thambi;
   }

   .date_label_bottom {
     fill: #8FA2AC;
     text-anchor: middle;
     font-family: Baloo Thambi;
   }

   .circle_legend {
     fill: none;
   }

   .tooltip {
     border-radius: 10px;
     padding: 10px;
     position: absolute;
     color: #FFF;
     background-color: #222;
     opacity: .9;
     z-index: 1;
     font-family: Baloo Thambi;
   }

   text {
     font-family: Baloo Thambi;
   }

   label {
     font-family: Baloo Thambi;
   }

   select {
     font-family: Baloo Thambi;
   }

   .trend_label {
     font-family: Baloo Thambi;
   }

   .show_label {
     font-family: Baloo Thambi;
   }

   .legend_50_label {
     fill: #8FA2AC;
     text-anchor: middle;
     font-family: Baloo Thambi;                   
   }

   .legend_label {
     fill: #8FA2AC;
     text-anchor: middle;
     font-family: Baloo Thambi;                     
   }
</style>

</head>

<body>
   <div id='title' style='width:1366px;'>
      <h1>TV dramas shown in America</h1>
      <h2>Average IMDb user ratings, by show and season*</h2>
      <br></br>
   </div>
   <div id='toolbar'></div>
   <div id='vis' style='width:1366px;'>
       <svg class='chart-outer'><g class='chart'></g></svg>
   </div>
   <div id='caption' style='width:1366px;'>
      <p style='text-align:right'>*Seasons with at least 100 ratings on average</p>
   </div>

<script>

  var data = JSON.parse(document.getElementById('data').innerHTML);
  var vis_width = 1366;
  var vis_height = 650;
  var params = {titleaxis: 'All'};

  draw = function(data, vis_width, vis_height, params) {

      var margin = {top: 30, right: 30, bottom: 30, left: 30};
      var width = vis_width - margin.left - margin.right,
          height = vis_height - margin.top - margin.bottom;
      d3.select('.chart-outer')
          .attr('width', vis_width)
          .attr('height', vis_height);

      var svg = d3.select('.chart').append('svg')
            .attr('width', vis_width)
            .attr('height', vis_width)
          .append('g')
            .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');

      var xScale = d3.scaleTime()
              .range([0, width])
              .domain([_.min(data.map(function(d) { return new Date(d['date']);})),
                       _.max(data.map(function(d) { return new Date(d['date']);}))])

      var yScale = d3.scaleLinear()
        .range([height, 0])
        .domain([5.5,
                 10]);

      var bubbleScale = d3.scaleLinear()
          .range([10,1000])
          .domain([_.min(data.map(function(d) { return d['share'];})),
                   _.max(data.map(function(d) { return d['share'];}))]);

      var line = d3.line()
          .x(function(d) { return xScale(new Date(d['date'])); }) // set the x values for the line generator
          .y(function(d) { return yScale(d['av_rating']); }) // set the y values for the line generator 
          .curve(d3.curveMonotoneX) // apply smoothing to the line

      var yAxis = d3.axisRight(yScale)
                   .tickSize(0);

      svg.append('g')
          .attr('class', 'y axis')
          .attr('transform', 'translate(' + width + ',' + 0 + ')')
          .call(yAxis);

      var date_labels = [{date: '1990'},
                         {date: '1995'},
                         {date: '2000'},
                         {date: '2005'},
                         {date: '2010'},
                         {date: '2015'},
                         {date: '2018'}];

      svg.selectAll('.date_marker')
          .data(date_labels)
        .enter().append('line')
          .attr('class', '.date_marker')
          .attr('y1', yScale(5.5))
          .attr('x1', function(d) {return xScale(new Date(d['date'] + '-01-01'));})
          .attr('x2', function(d) {return xScale(new Date(d['date'] + '-01-01'));})
          .attr('y2', yScale(10))
          .style('stroke', '#E3E9ED')

      svg.selectAll('.date_label_top')
          .data(date_labels)
        .enter().append('text')
          .attr('class', 'date_label_top')
          .attr('x', function(d) {return xScale(new Date(d['date'] + '-01-01'));})
          .attr('y', yScale(10) - 10)
          .text(function(d) {return d['date']})

      svg.selectAll('.date_label_bottom')
          .data(date_labels)
        .enter().append('text')
          .attr('class', 'date_label_bottom')
          .attr('x', function(d) {return xScale(new Date(d['date'] + '-01-01'));})
          .attr('y', yScale(5.5) + 20)
          .text(function(d) {return d['date']})

      svg.append('line')
          .attr('class', 'line trend')
          .attr('x1', xScale(new Date('1990-01-03')))
          .attr('y1', yScale(7.83048096429813))
          .attr('x2', xScale(new Date('2018-10-10')))
          .attr('y2', yScale(8.14802906821573))
          .style('stroke', '#256CA2')
          .style('stroke-width', 4)
          .style('stroke-dasharray', ('10, 10'))

      var titles = d3.set(data.map(function(d) { return d['title'];})).values();
      var i;
      for (i = 0; i < titles.length; i++) { 

          var title_filt = titles[i];
          var data_filt = _.filter(data,function(element){
              return element.title && [element.title].indexOf(title_filt) != -1;})

          svg.append('path')
              .datum(data_filt)  
              .attr('class', function(d) {return d[0]['highlight'] == 1 ? 'curve line_' + i + ' line_highlight': 'curve line_' + i;}) 
              .attr('d', line)
              .style('fill', 'none')
              .style('stroke','#55BCD2')
              .style('stroke-width', 4)
              .style('opacity', function(d) {return d[0]['highlight'] == 1 ? 1 : 0;})
      };
              
      for (i = 0; i < titles.length; i++) {

          var title_filt = titles[i];
          var data_filt = _.filter(data,function(element){
              return element.title && [element.title].indexOf(title_filt) != -1;})

          svg.selectAll('.circle_' + i)
            .data(data_filt)
          .enter().append('circle')
            .attr('class', function(d) {return d['highlight'] == 1 ? 'dot circle_' + i + ' circle_highlight' : 'dot circle_' + i;})
            .attr('cx', function(d) { return xScale(new Date(d['date']));})
            .attr('cy', function(d) { return yScale(parseFloat(d['av_rating']));})
            .attr('r', function(d) { return Math.sqrt((bubbleScale(parseFloat(d['share'])))/Math.PI);})
            .style('fill', function(d) {return d['highlight'] == 1 ? '#55BCD2' : '#BFE1EA';}) // #55BCD2 for highlighted, #BFE1EA for non-highlighted
            .style('stroke-width', 0)
            .style('stroke', 'black')
            .on('mouseover', function(d) {
              if (params['titleaxis'] === 'All') {
                  d3.selectAll('.dot')
                    .style('fill', '#BFE1EA')
                  d3.selectAll('.curve')
                    .style('opacity', 0)
                  var this_class = d3.select(this).attr('class')
                  var this_index = this_class.split(' ')[1].split('_')[1]
                  d3.selectAll('.circle_' + this_index)
                    .style('fill', '#55BCD2')
                  d3.selectAll('.line_' + this_index)
                    .style('opacity', 1)
                    .moveToFront(); //bring to front
                  d3.select(this)
                    .style('stroke-width', 2)
                    .moveToFront(); //bring to front;
                  d3.selectAll('.show_label')
                    .style('opacity', 0)

                  var label = d['title'] + '<br/>' +
                              'Season ' + d['seasonNumber'] + '<br/>' +
                              'Rating: ' + (Math.round(10 * d['av_rating'])/10) + '<br/>' +
                              'Share: ' + Math.round(10 * d['share'])/10 + '%';
                  return showDetails(label,this)
              }

              if (d['title'] === params['titleaxis']) {
                  var label = d['title'] + '<br/>' +
                              'Season ' + d['seasonNumber'] + '<br/>' +
                              'Rating: ' + (Math.round(10 * d['av_rating'])/10) + '<br/>' +
                              'Share: ' + Math.round(10 * d['share'])/10 + '%';
                  return showDetails(label,this);
              }
            })
            .on('mouseout', function(d) {
              if (params['titleaxis'] === 'All') {
                  d3.selectAll('.dot')
                    .style('fill', '#BFE1EA')
                    .style('stroke-width', 0);
                  var this_class = d3.select(this).attr('class');
                  var this_index = this_class.split(' ')[1].split('_')[1];
                  d3.selectAll('.line_' + this_index)
                    .style('opacity', 0)
                  d3.selectAll('.show_label')
                    .style('opacity', 1)
                  d3.selectAll('.line_highlight')
                    .style('opacity', 1)
                  d3.selectAll('.circle_highlight')
                    .style('fill', '#55BCD2')
              }

              return hideDetails();})
      };

      svg.append('text')
          .attr('class', 'trend_label')
          .attr('x', xScale(new Date('2011-01-01')))
          .attr('y', yScale(7.9))
          .style('font-size','20px')
          .text('TV Drama Trend')

      var show_labels = [{title: 'Law & Order', date: '2005-01-01', rating: 7.6},
                         {title: 'Breaking Bad', date: '2010-01-01', rating: 9},
                         {title: 'Game of Thrones', date: '2016-01-01', rating: 9.6},
                         {title: 'Lost', date: '2006-06-01', rating: 8.8},
                         {title: 'The Wire', date: '2005-01-01', rating: 8.5},
                         {title: 'Riverdale', date: '2018-01-01', rating: 8.25},
                         {title: 'The Walking Dead', date: '2014', rating: 8.35}];

      svg.selectAll('.show_label')
          .data(show_labels)
        .enter().append('text')
          .attr('class', 'show_label')
          .attr('x', function(d) {return xScale(new Date(d['date']));})
          .attr('y', function(d) {return yScale(d['rating']);})
          .style('fill', '#55BCD2')
          .style('font-size','14px')
          .style('text-anchor','middle')
          .style('opacity', 1)
          .text(function(d) {return d['title']})

      var data_legend = [{area: 10},
                         {area: 30},
                         {area: 50}];

      svg.selectAll('.circle_label')
          .data(data_legend)
        .enter().append('circle')
          .attr('class', 'circle_legend')
          .attr('cx', function(d) {return xScale(new Date('2002-06-01'));})
          .attr('cy', function(d) {return yScale(9.5) - Math.sqrt((bubbleScale(d['area']))/Math.PI);})
          .attr('r', function(d) {return Math.sqrt((bubbleScale(d['area']))/Math.PI)})
          .style('stroke-size', 2)
          .style('stroke','#8FA2AC')

      svg.append('text')
          .attr('class', 'legend_50_label')
          .attr('x', function(d) {return xScale(new Date('2002-06-01'));})
          .attr('y', function(d) {return yScale(9.5) - 2*Math.sqrt((bubbleScale(50))/Math.PI);})
          .style('font-size','12px')
          .style('text-anchor','middle')
          .text('50%')

      legend_label_data = [{text: 'Size = share of IMDb'},
                           {text: 'ratings for shows'},
                           {text: 'in that year'}]

      svg.selectAll('.legend_label')
          .data(legend_label_data)
        .enter().append('text')
          .attr('class', 'legend_label')
          .attr('x', function(d) { return xScale(new Date('2002-06-01'));})
          .attr('y', function(d,i) { return yScale(9.5) + Math.sqrt((bubbleScale(50))/Math.PI) + i*12;})
          .style('font-size','12px')
          .style('text-anchor','middle')
          .text(function(d) { return d['text']})

      $('#vis').append("<div class='tooltip' id='chart-tooltip'></div>");
      $('#chart-tooltip').hide();
  }

  var showDetails = function(data, element) {
    pos = $(element).position()
    $('#chart-tooltip').html(data)
    width = $('#chart-tooltip').width()
    height = $('#chart-tooltip').height()
    $('#chart-tooltip').css('top', (pos.top-height*1.5)+'px').css('left', (pos.left-width/2.0)+'px')
    $('#chart-tooltip').show()
  };
  var hideDetails = function() {
    $('#chart-tooltip').hide()
  };

  d3.selection.prototype.moveToFront = function() {  
      return this.each(function(){
      this.parentNode.appendChild(this);
      });
  };

  var createToolbar = function(data, params) {
      // an array of the title names in the original data source
      var titles = d3.set(data.map(function(d) { return d['title'];})).values();
      // set up toolbarTRend 
      //$('#vis').prepend("<div id='toolbar'></div>");
      // create pickers for both the x and y axis
      var dimensions = ['title'];
      var toolbar_labels = ['Show'];

      for(var i_dim in dimensions) {
        var dim = dimensions[i_dim];
        var label = toolbar_labels[i_dim];
        // create the select dropdown
        $('#toolbar').append("<div class='form-group'><label for='"+dim+"-var'>"+label+":</label><select class='form-control' id='"+dim+"-var'><option value = All selected>All</option></select></div>")
        // populate the dropdown with the show titles in the dataset
        for(i_title in titles) {
          title_name = titles[i_title];
          $('#'+dim+'-var').append("<option value='"+title_name+"'>"+title_name+"</option>");
        }
        // set picker to saved param values
        $('#'+dim+'-var').val(params[dim+'axis']);
        // handle change to select, wrap in anonymous function so the pickers dont clash
        $('#'+dim+'-var').change(function(dim) {
          return function() {
            var newVar = $('#'+dim+'-var').val();
            params[dim+'axis'] = newVar;
            params[dim+'axislabel'] = newVar;
              
            if (newVar === 'All') {
              d3.selectAll('.dot')
                .style('fill', '#BFE1EA')
              d3.selectAll('.curve')
                .style('opacity', 0)
              
              d3.selectAll('.show_label')
                .style('opacity', function() {return newVar === 'All' ? 1 : 0;})
              d3.selectAll('.line_highlight')
                  .style('opacity', function() {return newVar === 'All' ? 1 : 0;})
              d3.selectAll('.circle_highlight')
                  .style('fill', function() {return newVar === 'All' ? '#55BCD2' : '#BFE1EA';})
            } else {
              d3.selectAll('.show_label')
                .style('opacity', function() {return newVar === 'All' ? 1 : 0;})
              d3.selectAll('.line_highlight')
                  .style('opacity', function() {return newVar === 'All' ? 1 : 0;})
              d3.selectAll('.circle_highlight')
                  .style('fill', function() {return newVar === 'All' ? '#55BCD2' : '#BFE1EA';})
                  
              d3.selectAll('.dot')
                .style('fill', '#BFE1EA')
              d3.selectAll('.curve')
                .style('opacity', 0)
              
              var this_index = titles.indexOf(newVar)
  
              d3.selectAll('.circle_' + this_index)
                  .style('fill', '#55BCD2')
              d3.selectAll('.line_' + this_index)
                  .style('opacity', 1)
                  .moveToFront(); //bring to front
            }
            
          }
        }(dim));
      }
  }

  createToolbar(data, params);
  draw(data,vis_width,vis_height,params);

</script>
</body>
</html>